#include <iostream>
#include "CPU.h"
#include "GPU.h"
#include "Motherboard.h"
#include "Speakers.h"
#include "PC.h"
#include <string>
#include <limits>
using namespace std;

///CODE TO VALIDATE THE INTEGER INPUTS
int getInt(int minVal, int maxVal, string varName) {
    int input;
    // loop continues until a valid input is received
    while (true) {
        try {
            cout << endl << "--------------------------------------------" << endl << "  Welcome to the 'PC SPEC PICKER' program" << endl << "    >>> Created by Vladimir & Rn <<<    " << endl << "--------------------------------------------" << endl;
            cout << "Please enter an integer between " << minVal << " and " << maxVal << " for " << varName << ": ";
            cin >> input;
            if (cin.fail()) {
                throw runtime_error("Invalid input. Please enter a VALID integer.");
            }
            if (input < minVal || input > maxVal) {
                throw out_of_range("Invalid input. " + varName + " should be between " + to_string(minVal) + " and " + to_string(maxVal) + ".");
            }
            break;
        }
        catch (const exception& e) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << e.what() << endl;
            system("cls");
        }
    }
    system("cls");
    return input;
}
///CODE TO VALIDATE THE BOOLEAN INPUTS
bool getBool(string trueString, string falseString, string varName) {
    // loop continues until a valid input is received
    while (true) {
        try {
            // Ask user for input and display the possible values and variable name
            cout << "Please enter " << trueString << " or " << falseString << " for " << varName << ": ";
            string input;
            cin >> input;
            // If the input is invalid, throw an exception with a descriptive error message
            if (cin.fail()) {
                throw runtime_error("Invalid input. Please enter 'y' or 'n'.");
            }
            if (input != "y" && input != "n") {
                throw invalid_argument("Invalid input. " + varName + " should be either '" + trueString + "' or '" + falseString + "'.");
            }
            // If the input is valid, clear the screen and return the input value.
            system("cls");
            return input == "y";
        }
        // Catch the thrown exception, clear the input buffer, display the error message, and clear the screen.
        catch (const exception& e) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << e.what() << endl;
            system("cls");
        }
    }
}
///CODE TO VALIDATE THE FLOAT INPUTS
float getFloat(float minVal, float maxVal, string varName) {
    float input;
    // loop continues until a valid input is received
    while (true) {
        try {
            // Ask user for input and display range and variable name
            cout << "Please enter a float between " << minVal << " and " << maxVal << " for " << varName << ": ";
            cin >> input;
            // If the input is invalid, throw an exception with a descriptive error message
            if (cin.fail() || input < minVal || input > maxVal) {
                throw invalid_argument("Invalid input. " + varName + " should be a float between " + to_string(minVal) + " and " + to_string(maxVal) + ".");
            }
            // If the input is valid, clear the screen and return the input value.
            system("cls");
            return input;
        }
        // Catch the thrown exception, clear the input buffer, display the error message, and clear the screen.
        catch (const exception& e) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << e.what() << endl;
            system("cls");
        }
    }
}
///All the User Prompts That have to be validated
int userPrompts(){
    ///USER PROMPTS & INPUT CHECKER BELOW
    ///PC
    //i.e cout generated by functions getInt, getFloat etc, and cin to them inside round brackets
    int totalPower1 = getInt(100, 1500, "Total Power (W)");
    int numOfComponents1 = getInt(1, 20, "Number of Components");
    bool psucompatible1 = getBool("y", "n", "PSU Compatible");
    ///Part
    int price1 = getInt(10, 5000, "Price");
    int powerRating1 = getInt(5, 1000, "Power Rating (W)");
    //string name;
    ///Speakers
    int driverSize1 = getInt(2, 12, "Driver Size");
    bool subwoofer1 = getBool("y", "n", "Subwoofer");
    ///CPU
    int numOfCores1 = getInt(1, 64, "Number of Cores");
    float clockspeed1 = getFloat(0.5, 6.0, "Clock Speed (GHz)");
    ///Motherboard
    int numOfUsbPorts1 = getInt(2, 20, "Number of USB Ports");
    int ramSlots1 = getInt(2, 8, "RAM Slots");
    int ramGen1 = getInt(3, 6, "RAM Generation (i.e 3 for DDR3)");
    //string sockettype1;
    ///GPU
    int memorySize1 = getInt(2, 16, "Memory Size");
    int hdmiPorts1 = getInt(1, 4, "HDMI Ports");
    int dviPorts1 = getInt(1, 4, "DVI Ports");
    int displayPorts1 = getInt(1, 4, "Display Ports");
    int clockSpeed1 = getInt(500, 6000, "Clock Speed (MHz)");
    return 0;
}


int main(){
    //
    ///To construct 3 pc configurations (include all classes with overloaded constructors for specs)
    //
    /// Creating PC 1
    cout << "PC1:" << endl;
    CPU cpu1("AMD ryzen 5 3600x", 200, 200, 4, 2);
    GPU gpu1("Nvidia 1060", 250, 230, 6, 2, 1, 1, 1506);
    Motherboard mobo1("Gigabyte b450m", 30, 75, 6, "am4", 4, 4);
    Speaker speak1("Altec Lansing 221", 25, 60, 3, true);
    PC pc1;
    pc1.Addpart(&cpu1);
    pc1.Addpart(&gpu1);
    pc1.Addpart(&mobo1);
    pc1.Addpart(&speak1);
    // Display the parts of the PC
    //pc1.Displayparts();
    // Remove the GPU from the PC
    //pc1.Removepart(1);
    // Display the parts of the PC after removing the GPU
    //pc1.Displayparts();
    pc1.SavePC("pcinfo.txt");
    PC pc2;
    pc2.LoadPC("pcinfo.txt");
    pc2.Displayparts();

    /*/// Creating PC 2
    cout << "PC2:" << endl;
    CPU cpu2("Intel Core i5-11600K", 250, 300, 6, 2);
    GPU gpu2("Nvidia RTX 3060", 450, 350, 12, 3, 1, 1, 1320);
    Motherboard mobo2("ASUS ROG Strix B560-F", 150, 200, 8, "LGA 1200", 6, 4);
    Speaker speak2("Logitech Z623", 100, 200, 5, true);
    PC pc2;
    pc2.Addpart(&cpu2);
    pc2.Addpart(&gpu2);
    pc2.Addpart(&mobo2);
    pc2.Addpart(&speak2);
    pc2.Addpart(&speak2);
    // Display the parts of the PC
    pc2.Displayparts();
    pc2.Sortbypartprice();
    pc2.Displayparts();
    pc2.Findpart("AMD ryzen 5 3600x");

    /// Creating PC 3
    cout << "PC3:" << endl;
    CPU cpu3("Intel Core i5-11600K", 250, 250, 4, 2);
    GPU gpu3("AMD Radeon RX 6600 XT", 400, 200, 8, 3, 1, 1, 2359);
    Motherboard mobo3("ASUS TUF GAMING B560M-PLUS", 100, 150, 6, "LGA1200", 4, 2);
    Speaker speak3("Bose Companion 5", 150, 250, 4, true);
    PC pc3;
    pc3.Addpart(&cpu3);
    pc3.Addpart(&gpu3);
    pc3.Addpart(&mobo3);
    pc3.Addpart(&speak3);
    // Display the parts of the PC
    pc3.Displayparts();*/
    //call function for all user prompts with desired PC specs
    //userPrompts();
    //deep copy constructor
    PC pc1copy;
    pc1copy = pc1;
    return 0;
}


